/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> List_to_Array(ListNode* head){
        vector<int> result;
        while(head){
            result.push_back(head->val);
            head = head->next;
        }
        return result;
    }

    TreeNode* Traverse(vector<int>& nums, int l, int m){
        if(l > m)   return NULL;
        int mid = l + (m - l) / 2;
        TreeNode* root = new TreeNode(nums[mid]);
        root->left = Traverse(nums,l,mid-1);
        root->right = Traverse(nums,mid+1,m);
        return root;
    }

    TreeNode* sortedListToBST(ListNode* head) {
        vector<int> nums;
        nums = List_to_Array(head);
        return Traverse(nums,0,nums.size()-1);
    }
};

//先将链表转化为数组，用数组去构造BST
//用数组构造BST的思路是递归，Traverse函数输入数组和两个int值分别表示数组的开头和结尾
//找到mid（记得要用l+（r-l）/2 而不是 （l+r）/2， 防止l和r很大而越界），让mid成为根节点
//根节点的左孩子递归Traverse（数组，开头，mid-1） 根节点的右孩子递归Traverse（数组，mid+1，结尾）
