class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        set<vector<int>> s;
        vector<vector<int>> result;
        sort(nums.begin(),nums.end());
        for(int i = 0; i < nums.size(); i++){

            int left = i + 1;
            int right = nums.size() - 1;
            if(right <= left)   break;
            if(nums[i] > 0 || nums[right] < 0)   break;
            if(nums[i] == 0 && nums[left] == 0 && nums[right] == 0){
                s.insert({0,0,0});
                break;
            }


            while(left < right){
                
                if(nums[i] + nums[left] + nums[right] < 0)  left++;
                else if(nums[i] + nums[left] + nums[right] > 0) right--;
                else{
                    s.insert({nums[i],nums[left],nums[right]});
                    left++;
                    right--;
                }
            }
        }
        result.assign(s.begin(),s.end());
        return result;
    }
};

//我的方法不是很好，主要思路是双指针，这道题的难点在于去重
//给vector去重有两种方法，我用的是set，依靠set这种数据结构自动去重的方法来给vector进行去重
//把结果先存到set中，再利用assign函数把set中的结果存回vector

————————————————————————————————————————————————————————————————————————————————————————————————

class Solution {
public:
// solving question using pointers ... itterative way ..... 
 
vector<vector<int>> threeSum(vector<int>& v) {
    vector<vector<int>>ans;
    std::sort(v.begin(),v.end());
   // if(v[0]>0){return {};}
    int *x=&v[0];
    int *end=x+v.size()-1;

    while(x<end-1){
      //  int x=v[i];

        int *y=x+1;
        int *z=end;
        while( y < z ){

            if(*x+*y+*z==0){
                // making y  point next unique element ,....
                while(y+1<z){
                    if(*(y+1)==*y){y++;}
                    else break;
                }
                // making z  point previous.. unique element ,....
                while(z-1>y){
                    if(*(z-1)==*z){z--;}
                        else break;
                }
                ans.push_back({*x,*y,*z});
                y++;z--;

            } else if(*y+*z+*x<0){
                // making y  point next unique element ,....
                while(y+1<z){
                    if(*(y+1)==*y){y++;}
                    else break;
                }
                y++;

            }   else {
                // making z  point previous.. unique element ,....
                while(z-1>y){
                    if(*(z-1)==*z){z--;}
                        else break;
                }
                z--;
            }
        }
        while(x+1 < end-1){
            if(*(x+1)==*x){x++;}
            else break;
        }
        x++;
    }
    return ans;
}
};

//这个方法虽然很快，但是要考虑太多边界情况和细节
